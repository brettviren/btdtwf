#+title: Functional Network Workflow

* COMMENT setup
#+begin_src emacs-lisp :results silent
  (defmacro by-backend (&rest body)
    `(case (if (boundp 'backend) backend nil) ,@body))
#+end_src


Building a workflow with BTDTWF means building a directed acyclic graph (DAG).   Each node represents a part of the processing.  An edge connects output of one node to an input of another.  This is called a Functional Network Workflow (FNW) graph.

* Nodes

There are two basic requirements for any node object:

 - It must be an idempotent callable object, taking no arguments and returning a value
 - It may accepts input nodes

#+header: :file (by-backend (latex "basic-node.pdf") (t "basic-node.svg"))
#+header: :export results
#+BEGIN_SRC dot
  digraph OneNode {
          node1 -> dest;
          a -> node2;
          b -> node2;
  }
#+END_SRC

#+RESULTS:
[[file:basic-node.svg]]

The arrows indicate data flow which, as discussed below, is counter to the direction of references from one node to another.  In the first graph, =node1= takes no input and is connected to the node =dest=.  In the second graph nodes =a= and =b= take no input and are both connected to =node2=.


** Idempotent Callable

The node object must be callable.  The call must takes no arguments.  A value must be returned and will be used by nodes that were given the node as input.  If the call is repeated the same value must be returned.


** Connections

A node need not accept any input.  An example would be a node that provides a static parameter which has been fixed at graph construction time.  Nodes which do accept input must implement the =connect()= method.  When the graph is evaluated it will be called with information about every "edge" connecting the node to an input node.  Any values associated with the edge are passed as keyword arguments.

#+BEGIN_SRC python
  def connect(self, node, **kwds):
      # do something with node
      return
#+END_SRC

It is up to the node to interpret the connection information.  However, =connect()= must not call the node.

** Calling

After the graph is constructed and connected (see below) it may be called.  Calling the graph involves calling one or more nodes.  When a node is called it must call any connected input nodes in order to access their values.  It should then calculate and return a result.

** Caching

A node should be written following these guidelines:

 - it must handle being called multiple times and returning the same value each time

 - it must call any inputs once but should avoid calling them more than once

 - it should arrange to avoid repeating its calculation and cache and return the result from the first call


* Graph construction and connection

An FNW graph is made from a [[http://networkx.github.io][NetworkX]] =DiGraph= object following usual NetworkX usage.

#+BEGIN_SRC python
  import networkx as nx
  graph = nx.DiGraph()
  graph.add_edge(MyNode(), MyOtherNode(), edge_value=42)
  # ...
#+END_SRC

Once all desired nodes and edges values have been added the graph is considered /constructed/.  After construction none of the nodes have yet had their =connect()= methods called on their input edges.  This is done simply with an iteration over all edges like:

#+BEGIN_SRC python
  for tail, head, data in graph.edges(data=true):
      h.connect(tail, **data)
#+END_SRC

At this point the graph is considered /connected/.  Any of its nodes may now be called.

** Instrumenting connections

The connection process is free to insinuate code between the nodes as long as it preserves the node interface.  For example, to add print statements around the node calls.

#+BEGIN_SRC python
  class Chirp:
      def __init__(self, node):
          self._node = node
      def __call__(self):
          print 'Calling:', self._node
          val = self._node()
          print 'Got:',val
          return val
      def connect(self, node, **kwds):
          self._node.connect(node, **kwds)
  #...
  for t,h,d in G.edges(data=True):
      h.connect(Chirp(t),**d)

#+END_SRC


* Node patterns

By itself, a NFW graph is nothing special.  It provides the basis of expressing workflow patterns.

** Parameter

Node processes may be parameterized.  A parameter value may be hard coded or it may pull its value from some configuration database (keeping in mind the requirement of idempotency).  Some examples

#+BEGIN_SRC python
  def param():
      return 42
  param = lamda:
      return 42
  def param(db, name):
      return db[name]
  class Param():
      def __init__(self, val):
          self._val = val
      def __call__(self):
          return self._val
  param = Param(42)
#+END_SRC

In these examples, =param= can be used as a node.

** Parameter set

A realistic function will take many named parameters.

#+BEGIN_SRC python
  class FuncNode():
      def __init__(self, required, foo=42, bar=6.9, **other):
          self._params = dict(required=lambda:required, foo=lambda:foo, bar=lambda:bar)
      def connect(self, node, name=None, **other):
          if name is None:
              raise KeyError, 'Need name'
          self._params[name] = node
      def __call__(self):
          return _params['foo']() + self._params['bar']()
#+END_SRC

** Filter

Some functions may return a dictionary or other collection while others may need only subset.

#+BEGIN_SRC python
  class ScalarFromDict:
      def __init__(self, name):
          self._name = name
          self._node = None
      def connect(self, node, **data):
          self._node = node
      def __call__(self):
          return self._node()[self._name]
#+END_SRC

** Fail-over

There may be multiple sources for a result which can implement a fail-over or cache mechanism.

#+BEGIN_SRC python
  def fail(): return None
  def succeed(): return 42
  class KeepTrying:
      def __init__(self):
          self._input = list()
      def connect(self, node, **kwds):
          self._input.append(node)
      def __call__(self):
          for n in self._input:
              v = n()
              if v is not None:
                  return v
          return None
  kt = KeepTrying()
  graph.add_edge(fail,kt)
  graph.add_edge(succeed,kt)

#+END_SRC


** Cached process

If the result of a process can be persisted in a way that is indexed by its input then this store can be used to provide a cache with on-demand running of the process if the result does not yet exist.

#+header: :file (by-backend (latex "cache-pattern.pdf") (t "cache-pattern.svg"))
#+header: :export results
#+BEGIN_SRC dot
    digraph OneNode {
            params -> cache [label="inputs"];
            params -> proc [label="inputs"];
            proc -> cache [label=" results"];
            storage [shape=box];
            storage -> cache [style=dotted, dir=both];
            cache -> caller [label=" results"];
    }
    
#+END_SRC

#+RESULTS:
[[file:cache-pattern.svg]]



An input =params= node is connected to both the =cache= and =proc= nodes.  The =proc= node produces output, potentially after an expensive calculation.  The =cache= node first calls =params= and uses the result as a key to check some storage.  If a prior result is found it returns that result and never calls =proc=.  If no prior storage is found, then =proc= is called and the result is sent to storage (keyed by the =params= value) and then made available as the output value for =cache=.  The storage mechanism is unspecified but it may be made fine-grained such that the cache can be invalidated if it is older than the new inputs from =params= (eg, some entries of =params= may be file names and the associated files may be newer than the cached result).  This mechanism is employed in the storage module provided by BTDTWF.  More information on this is in [[./storage.org]].



** Cached with file I/O

A process may read and write files in addition to consuming and producing object data.  

#+header: :file (by-backend (latex "fileio-cache.pdf") (t "fileio-cache.svg"))
#+header: :export results
#+BEGIN_SRC dot
  digraph FileIOCache {
          proc [shape=box];
          "if" [shape=octagon, label="input file name"]; 
          "io" [label="input\nobjects"];
          "of" [shape=octagon, label="output file pattern"]; 
          "if" -> proc [labeljust="l",label="name:myinput,\nfiletype:input",headport=nw];
          "io" -> proc;
          "of" -> proc [label="name:myoutput,\nfiletype:output"];
          proc -> "output objects";
  }
#+END_SRC

#+RESULTS:
[[file:fileio-cache.svg]]



* end
-----


